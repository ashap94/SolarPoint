{"version":3,"sources":["webpack/bootstrap","./js/SceneManager.js","./js/sceneSubjects/Earth.js","./js/sceneSubjects/GeneralLights.js","./js/sceneSubjects/Moon.js","./js/sceneSubjects/StarField.js","./js/sceneSubjects/Sun.js","./main.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main.js\");\n","// var THREE = require('three');\n// var OrbitControls = require('three-orbit-controls')(THREE);\n// OrbitControls === undefined;\n\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three-orbitcontrols-ts';\nimport Earth from \"./sceneSubjects/Earth\";\nimport GeneralLights from \"./sceneSubjects/GeneralLights\";\nimport StarField from \"./sceneSubjects/StarField\";\nimport Sun from \"./sceneSubjects/Sun\";\nimport Moon from \"./sceneSubjects/Moon\";\n\n\nfunction SceneManager(canvas) {\n\n    const clock = new THREE.Clock();\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene);\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    camera.position.z = 10;\n    controls.minDistance = 5;\n    controls.maxDistance = 2000;\n\n    function buildScene() {\n        const scene = new THREE.Scene();\n\n        // scene.background = new THREE.Color(0xffffff);\n\n        // var geometry = new THREE.SphereGeometry(1000,1000,1000);\n        // var material = new THREE.MeshBasicMaterial();\n        // material.map = THREE.TextureLoader('/js/libs/threex.planets-master/images/galaxy_starfield.png');\n        // material.side = THREE.BackSide;\n        // var mesh = new THREE.Mesh(geometry, material)\n\n        // scene.backgroud = mesh;\n\n        // scene.background = new THREE.CubeTextureLoader().setPath(\"js/libs/Skybox_Images/\")\n        //     .load([\"galaxy-X.jpg\", \"galaxy-Y.jpg\", \"galaxy-Z.jpg\", \"galaxy+X.jpg\", \"galaxy+Y.jpg\", \"galaxy+Z.jpg\"]);\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });\n        const DPR = (window.devicePixelRatio) ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        // renderer.setClearColor(0xffffff);\n        renderer.setSize(width, height);\n\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true;\n\n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 75;\n        const nearPlane = 0.1;\n        const farPlane = 30000;\n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n        \n        return camera;\n    }\n\n    // function buildSkybox() {\n    //     let materialArray = [];\n    //     let texture_ft = new THREE.TextureLoader().load('galaxy-X.tga');\n    //     let texture_bk = new THREE.TextureLoader().load('galaxy-Y.tga');\n    //     let texture_up = new THREE.TextureLoader().load('galaxy-Z.tga');\n    //     let texture_dn = new THREE.TextureLoader().load('galaxy+X.tga');\n    //     let texture_rt = new THREE.TextureLoader().load('galaxy+Y.tga');\n    //     let texture_lf = new THREE.TextureLoader().load('galaxy+Z.tga');\n\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }));\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_bk }));\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_up }));\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_dn }));\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_rt }));\n    //     materialArray.push(new THREE.MeshBasicMaterial({ map: texture_lf }));\n\n    //     for (let i = 0; i < 6; i++)\n    //         materialArray[i].side = THREE.BackSide;\n\n    //     let skyboxGeo = new THREE.BoxGeometry(1000, 1000, 1000);\n    //     let skybox = new THREE.Mesh(skyboxGeo, materialArray);\n    //     scene.add(skybox);\n    // }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            new StarField(scene),\n            new Sun(scene),\n            new Earth(scene),\n            // new Moon(scene)\n        ];\n\n        // THREE.sceneSubjects[3].add(sceneSubjects[4]);\n\n        return sceneSubjects;\n    }\n\n    this.update = function () {\n        const elapsedTime = clock.getElapsedTime();\n\n        for (let i = 0; i < sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n\n        renderer.render(scene, camera);\n    }\n\n    this.onWindowResize = function () {\n        const { width, height } = canvas;\n\n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(width, height);\n    }\n}\n\nexport default SceneManager;","// import * as THREE from 'three';\n// import Moon from \"./Moon\";\nfunction Earth(scene) {\n\n    var earth = new THREE.Mesh(\n        new THREE.SphereGeometry(2, 30, 30), \n        new THREE.MeshPhongMaterial());\n\n    // earth.material.color.set('rgb(30,230,55)');\n    earth.material.map = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/earthmap1k.jpg');\n    earth.material.bumpMap = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/earthbump1k.jpg');\n    earth.material.bumpScale = 0.05;\n    // earth.material.specularMap = THREE.ImageUtils.loadTexture('images/earthspec1k.jpg');\n    // earth.material.specular = new THREE.Color('grey');\n    \n    var orbitRadius = 25;\n    var orbitRadiusMoon = 5;\n\n    earth.position.set(orbitRadius, 0, 0);\n    // earth.rotation.z = (Math.PI / 2);\n    // earth.rotation.x = Math.PI / 2;\n\n\n    var material = new THREE.LineBasicMaterial({color: 'aqua'});\n    var geometry = new THREE.CircleGeometry( orbitRadius, 1000);\n    geometry.vertices.shift();\n    var line = new THREE.Line(geometry, material);\n    line.position.set(0,0,0);\n\n\n    // MOON Construction \n\n    var moon = new THREE.Mesh(\n        new THREE.SphereGeometry(1, 30, 30),\n        new THREE.MeshPhongMaterial());\n\n    moon.material.map = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/moonmap1k.jpg');\n    moon.material.bumpMap = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/moonbump1k.jpg');\n    moon.material.bumpScale = 0.05;\n\n    moon.position.set(orbitRadiusMoon, 0, 0);\n\n    var materialMoon = new THREE.LineBasicMaterial({ color: 'aqua' });\n    var geometryMoon = new THREE.CircleGeometry(orbitRadiusMoon, 1000);\n    geometryMoon.vertices.shift();\n    var lineMoon = new THREE.Line(geometryMoon, materialMoon);\n    lineMoon.position.set(0, 0, 0);\n\n    // moon.rotation.y = (Math.PI / 2);\n    // moon.rotation.x = -(Math.PI / 2);\n\n    // lineMoon.rotation.y = (Math.PI / 2);\n    // lineMoon.rotation.x = -(Math.PI / 2);\n\n\n    // var orbit = new THREE.Group();\n    // orbit.add(line);\n    // orbit.add(earth);\n\n    // var moon = new Moon(scene);\n\n    earth.add( moon );\n    earth.add( lineMoon);\n\n    scene.add(earth);\n    scene.add(line);\n\n    console.log(earth);\n\n    // scene.add(mesh);\n\n    this.update = function (time) {\n        const scale = Math.sin(time);\n\n        // earth.position.set(Math.cos(time) * orbitRadius, Math.sin(time) * orbitRadius );\n        earth.position.x = Math.cos(time * 0.15) * orbitRadius ;\n        earth.position.y = Math.sin(time * 0.15) * orbitRadius ;\n        earth.rotation.y = time * 0.45;\n\n        earth.children.Mesh.position.x = Math.cos(time * 0.15) * orbitRadiusMoon;\n        earth.children.Mesh.position.y = Math.sin(time * 0.15) * orbitRadiusMoon;\n        earth.children.Mesh.rotation.y = time * 0.45;\n\n        // lineMoon.rotation.y = time * 0.45;\n        \n    }\n\n}\n\nexport default Earth;","// import * as THREE from 'three';\nfunction GeneralLights(scene) {\n\n    var light = new THREE.PointLight(0xffffff, 5, 1000);\n    light.position.set(0,0,0);\n    scene.add(light);\n\n    // var light = new THREE.PointLight(0xffffff, 1, 1000);\n    // light.position.set(0, 0, -25);\n    // scene.add(light);\n\n    var light = new THREE.AmbientLight(0xffffff, 1);\n    scene.add( light );\n\n    this.update = function (time) {\n        // light.intensity = (Math.sin(time) + 1.5) / 1.5;\n        // light.color.setHSL(Math.sin(time), 0.5, 0.5);\n    }\n}\n\nexport default GeneralLights;","function Moon(scene) {\n\n    var moon = new THREE.Mesh(\n        new THREE.SphereGeometry(1, 30, 30),\n        new THREE.MeshPhongMaterial());\n\n    moon.material.map = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/moonmap1k.jpg');\n    moon.material.bumpMap = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/moonbump1k.jpg');\n    moon.material.bumpScale = 0.05;\n\n    var orbitRadius = 8;\n\n    moon.position.set(orbitRadius, 0 , 0);\n\n    var materialMoon = new THREE.LineBasicMaterial({ color: 'aqua' });\n    var geometryMoon = new THREE.CircleGeometry(orbitRadius, 1000);\n    geometryMoon.vertices.shift();\n    var lineMoon = new THREE.Line(geometryMoon, materialMoon);\n    lineMoon.position.set(0, 0, 0);\n\n    scene.add(moon);\n    scene.add(line);\n\n    this.update = function (time) {\n        moon.position.x = Math.cos(time * 0.15) * orbitRadius;\n        moon.position.y = Math.sin(time * 0.15) * orbitRadius;\n        moon.rotation.y = time * 0.45;\n    }\n\n}\n\nexport default Moon;","// import * as THREE from 'three';\nfunction StarField (scene) {\n\n    var geometry = new THREE.SphereGeometry(1000, 1000, 1000);\n    var material = new THREE.MeshBasicMaterial();\n\n    material.map = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/galaxy_starfield.jpg');\n    // material.map = new THREE.SphereTextureLoader().setpath(\"js/libslibs/threex.planets-master/images/\")\n    //     .load('galaxy_starfield.jpg');\n\n    material.side = THREE.BackSide;\n    var mesh = new THREE.Mesh(geometry, material)\n\n    scene.add(mesh);\n\n    this.update = function (time) {\n\n    }\n\n}\n\nexport default StarField;","// import * as THREE from 'three';\nfunction Sun(scene) {\n\n    var radius = 2;\n    var mesh = new THREE.Mesh(new THREE.SphereGeometry(radius, 30, 30), new THREE.MeshStandardMaterial({ flatShading: false }));\n    // mesh.material.color.set(\"#FDB813\");\n    mesh.material.map = THREE.ImageUtils.loadTexture('js/libs/threex.planets-master/images/sunmap.jpg');\n\n    mesh.position.set(0, 0, 0);\n\n    scene.add(mesh);\n\n    this.update = function (time) {\n        const scale = Math.sin(time);\n        \n\n        // mesh.scale.set(scale, scale, scale);\n        // mesh.position.set(scale)\n    }\n}\n\nexport default Sun;","// import * as THREE from 'three';\nconst canvas = document.getElementById(\"canvas\");\nimport SceneManager from \"./js/SceneManager\";\nconst sceneManager = new SceneManager(canvas);\n\nbindEventListeners();\nrender();\n\nfunction bindEventListeners() {\n    window.onresize = resizeCanvas;\n    resizeCanvas();\n}\n\nfunction resizeCanvas() {\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n    sceneManager.onWindowResize();\n}\n\nfunction render() {\n    requestAnimationFrame(render);\n    sceneManager.update();\n}"],"sourceRoot":""}